{"version":3,"sources":["elements/elements.js","elements/button/buttonData.js","elements/button/button.js","bundle_source.js","elements/button/ButtonComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","name","isReady","tabs","text","js","react","angular","vue","filled","contained","Button","__html","__id","Object","classCallCheck","this","_html","_id","init","_this","console","log","concat","id","html","addEventListener","e","clickHandler","getButtons","buttonElements","document","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","i","elem","err","return","ButtonComponent","bundleSrc","useEffect","react_default","a","createElement","Fragment","keys","data","map","idx","dangerouslySetInnerHTML","key","App","_useState","useState","_useState2","content","setContent","style","display","flexDirection","height","textAlign","margin","padding","color","background","flexGrow","borderRight","flexBasis","elements","className","onClick","button_ButtonComponent","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.10e1a1c9.chunk.js","sourcesContent":["module.exports = {\n  button: {\n    name: 'button',\n    isReady: true\n  },\n  tabs: {\n    name: 'tabs',\n    isReady: false\n  }\n};\n","module.exports = {\n  text: {\n    name: \"text\",\n    js: `<button type=\"button\" class=\"zep-button\" data-zep-type=\"button\">Text Button</button>`,\n    react: false,\n    angular: false,\n    vue: false\n  },\n  filled: {\n    name: \"filled\",\n    js: `<button type=\"button\" class=\"zep-button zep-button__filled\" data-zep-type=\"button\">Filled Button</button>`,\n    react: false,\n    angular: false,\n    vue: false\n  },\n  contained: {\n    name: \"contained\",\n    js: `<button type=\"button\" class=\"zep-button zep-button__contained\" data-zep-type=\"button\">Contained Button</button>`,\n    react: false,\n    angular: false,\n    vue: false\n  }\n};\n","export default class Button {\n  constructor(__html, __id) {\n    this._html = __html;\n    this._id = __id;\n    this.init();\n  }\n\n  init() {\n    console.log(`Button.init() - ${this.id}`);\n    this.html.addEventListener(\n      \"click\",\n      e => {\n        this.clickHandler(e);\n      },\n      false\n    );\n  }\n\n  get html() {\n    return this._html;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  clickHandler(e) {\n    console.log(\"click\", this.id);\n  }\n}\n","/**\n * Entry Point for Bundle creation.\n *\n * import all relevant scripts here\n */\n\nimport Button from \"./elements/button/button.js\";\n\n// test\nexport function getButtons() {\n  let buttonElements = document.querySelectorAll('[data-zep-type=\"button\"]');\n  console.log(\"buttonElements\", buttonElements);\n\n  for (let [i, elem] of buttonElements.entries()) {\n    new Button(elem, `button_${i}`);\n  }\n}\n\n// eslint-disable-next-line\nconsole.log(\"this will be the main js bundle entry point.\");\n","import React, { useEffect } from \"react\";\nimport data from \"./buttonData\";\nimport * as bundleSrc from \"../../bundle_source.js\";\n\nfunction ButtonComponent() {\n  bundleSrc.getButtons();\n  useEffect(() => {\n    bundleSrc.getButtons();\n  });\n\n  return (\n    <>\n      {Object.keys(data).map((elem, idx) => (\n        <div\n          dangerouslySetInnerHTML={{ __html: data[elem].js }}\n          key={`button${idx}`}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default ButtonComponent;\n","import React, { useState } from \"react\";\nimport elements from \"./elements/elements\";\nimport Button from \"./elements/button/ButtonComponent\";\nimport \"./bundle_source_styles.scss\";\nimport \"./App.css\";\n\nfunction App() {\n  const [content, setContent] = useState(\"welcome\");\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\" }}>\n      <h1\n        style={{\n          textAlign: \"center\",\n          margin: 0,\n          padding: 30,\n          color: \"#ffffff\",\n          background: \"#27166f \"\n        }}\n      >\n        Zeppelin Element Library\n      </h1>\n      <div style={{ display: \"flex\", flexGrow: 1 }}>\n        <div\n          style={{\n            borderRight: \"1px solid black\",\n            flexBasis: \"25%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: 30\n          }}\n        >\n          {Object.keys(elements).map((elem, i) => (\n            <button\n              key={`btn-${i}`}\n              className=\"zel-button\"\n              onClick={() => setContent(elements[elem].name)}\n            >\n              {elements[elem].name}\n            </button>\n          ))}\n        </div>\n        <div style={{ flexGrow: 1, padding: 30 }}>\n          {content === \"welcome\" && (\n            <p>Welcome to the Zeppelin Element Library</p>\n          )}\n          {content === \"button\" && <Button />}\n          {content === \"tabs\" && <p>This element is not ready</p>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
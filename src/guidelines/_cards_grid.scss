// values: colums, margin, grid-gutter
$cards-grid-values-map: (
  xs: (
    2,
    32px,
    2px
  ),
  s: (
    2,
    48px,
    2px
  ),
  m: (
    3,
    64px,
    2px
  ),
  l: (
    3,
    64px,
    2px
  ),
  xl: (
    3,
    auto,
    2px
  )
);

//xxs values
$cards-grid-cols: 1;
$cards-grid-gutter: 0;
$cards-grid-h-margin: 24px;

// other grid vars
$cards-grid-max-cols: 3;
$cards-grid-min-cols: 1;
$cards-max-grid-h-margin: 64px;
$cards-grid-values-map-length: length($cards-grid-values-map);
$cards-grid-max-width: #{map-get($min-screensize-map, l)}px;

/////////////////////////////////
//                             //
// USES MIXINS FROM _grid.scss //
//                             //
/////////////////////////////////

////////////////////////////////////////////////////////////////
//                                                            //
// Use standard grid class as long as margins and screensizes //
// are the same on grid and cards-grid                        //
//                                                            //
////////////////////////////////////////////////////////////////

// .#{$prefix}grid--cards {
//   position: relative;
//   display: flex;
//   flex-direction: column;
//   margin-left: $cards-grid-h-margin;
//   margin-right: $cards-grid-h-margin;

//   // set horizontal margin and width of grid container
//   @each $screensize, $valuelist in $cards-grid-values-map {
//     $index: index(($cards-grid-values-map), ($screensize $valuelist));
//     $margin: nth($valuelist, 2);

//     // get next element from grid-values-map for max-with on breakpoint media query until screensize l
//     @if $index < $cards-grid-values-map-length - 1 {
//       $iterator-next: nth($cards-grid-values-map, $index + 1);
//       $next-screen-size: nth($iterator-next, 1);

//       @include breakpoint--min-max(#{$screensize}, #{$next-screen-size}) {
//         @include grid-min-width-and-margin(
//           $margin,
//           $cards-grid-max-width,
//           $cards-max-grid-h-margin,
//           $min-screensize-map,
//           $screensize
//         );
//       }
//       // bigger than screensize l - breakpoint uses just min-width in media query
//     } @else {
//       // margin for screensize l
//       @include breakpoint--min(#{$screensize}) {
//         @include grid-min-width-and-margin(
//           $margin,
//           $cards-grid-max-width,
//           $cards-max-grid-h-margin,
//           $min-screensize-map,
//           $screensize
//         );
//       }

//       // use screensize + margin for transition to margin: auto
//       $next-margin: auto;
//       @include breakpoint--custom-min(
//         map-get($min-screensize-map, $screensize) + $margin + $margin
//       ) {
//         @include grid-min-width-and-margin(
//           $next-margin,
//           $cards-grid-max-width,
//           $cards-max-grid-h-margin,
//           $min-screensize-map,
//           $screensize
//         );
//       }
//     }
//   }

//   // get grid max screen with from style-basics/_breakpoints.scss
//   max-width: $cards-grid-max-width;

//   border: 1px solid blue;

//   &:after,
//   &:before {
//     content: '';
//     clear: both;
//     display: table;
//   }
// }

.#{$prefix}grid__row--cards {
  padding: 0;
  margin: 0;
  display: block;
  position: relative;

  @supports (display: flex) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }

  // clear grid-gutter on the first/left and last/right elements
  @each $screensize, $valuelist in $cards-grid-values-map {
    @include breakpoint--min(#{$screensize}) {
      $cards-grid-gutter: nth($valuelist, 3);
      $half-grid-gutter: $cards-grid-gutter / 2;

      // use negative margin to clear grid-gutter
      margin-left: -#{$half-grid-gutter};
      margin-right: -#{$half-grid-gutter};
    }
  }

  &:after,
  &:before {
    content: '';
    display: table;
    clear: both;
  }
}

.#{$prefix}grid__col--cards {
  // float is only for non flexbox browsers and overwritten by flex properties in modern browsers
  position: relative;
  display: block;
  float: left;
  flex-shrink: 1;
  border: 1px green solid;
}

// set col width for 3 col layout
@for $i from 1 through $cards-grid-max-cols {
  .#{$prefix}grid__col--cards-#{$i}-#{$cards-grid-max-cols} {
    $cols: $grid-min-cols;
    @include grid-breakpoint-content($i, $cols, $cards-grid-gutter);

    // change col with and grid-gutter on different breakpoints
    @each $screensize, $valuelist in $cards-grid-values-map {
      $index: index(($cards-grid-values-map), ($screensize $valuelist));

      // get next element from grid-values-map for max-with on breakpoint media query.
      @if $index < $cards-grid-values-map-length {
        $iterator-next: nth($cards-grid-values-map, $index + 1);
        $next-screen-size: nth($iterator-next, 1);

        @include breakpoint--min-max(#{$screensize}, #{$next-screen-size}) {
          $cols: nth($valuelist, 1);
          // grid-gutter changes with breakpoint
          $cards-grid-gutter: nth($valuelist, 3);

          $current-cols: $i;
          @if $current-cols > $cols {
            $current-cols: $cols;
          }
          @include grid-breakpoint-content(
            $current-cols,
            $cols,
            $cards-grid-gutter
          );
        }
      }
      // bigger than xl - breakpoint uses just min-width in media query
      @else {
        @include breakpoint--min(#{$screensize}) {
          $cols: nth($valuelist, 1);
          $cards-grid-gutter: nth($valuelist, 3);

          @include grid-breakpoint-content($i, $cols, $cards-grid-gutter);
        }
      }
    }
  }
}

// reverse map for specifity reasons
$cards-grid-values-reverse-map: mapReverse($cards-grid-values-map);
// @debug $grid-values-reverse-map;

// set cols for xl, l, m, s, xs
@each $screensize, $valuelist in $cards-grid-values-reverse-map {
  $index: index(($cards-grid-values-reverse-map), ($screensize $valuelist));
  $cols: nth($valuelist, 1);
  $cards-grid-gutter: nth($valuelist, 3);

  // get next screen size from reversed map as long as a next element in map exists
  @if $cards-grid-values-map-length > $index {
    $iterator-next: nth($cards-grid-values-reverse-map, $index + 1);
    $next-screen-size: nth($iterator-next, 1);

    @for $i from 1 through $cols {
      .#{$prefix}grid__col--cards-#{$screensize}-#{$i}-#{$cols} {
        @include breakpoint--min-max(#{$next-screen-size}, #{$screensize}) {
          @include grid-breakpoint-content($i, $cols, $cards-grid-gutter);
        }
      }
    }
    // get last screen size for media query to display smallest variant
  } @else {
    $iterator-next: nth($cards-grid-values-reverse-map, $index - 1);
    $last-screen-size: nth($iterator-next, 1);

    @for $i from 1 through $cols {
      .#{$prefix}grid__col--cards-#{$screensize}-#{$i}-#{$cols} {
        @include breakpoint--min-max(#{$screensize}, #{$last-screen-size}) {
          @include grid-breakpoint-content($i, $cols, $cards-grid-gutter);
        }
      }
    }
  }
}

// set cols for xxs
$cards-grid-max-cols: 1;
$cards-grid-min-cols: 1;
$cards-grid-gutter: 24px;

@for $i from 1 through $cards-grid-max-cols {
  .#{$prefix}grid__col--cards-xxs-#{$i}-#{$cards-grid-max-cols} {
    $cols: $cards-grid-min-cols;

    // difference here is use of breakpoint--max() instead of breakpoint--min()
    @include breakpoint--max(xs) {
      @include grid-breakpoint-content($i, $cols, $cards-grid-gutter);
    }
  }
}

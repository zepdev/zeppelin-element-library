// this grid should be only implemented on full browser width elements!

// values: colums, margin, gutter
$grid-values-map: (
  xs: (
    6,
    32px,
    32px
  ),
  s: (
    6,
    48px,
    32px
  ),
  m: (
    8,
    64px,
    32px
  ),
  l: (
    12,
    64px,
    32px
  ),
  xl: (
    12,
    auto,
    32px
  )
);

@mixin breakpoint-content($current-cols, $cols, $gutter) {
  // -1px = floor calculated percentages workaround for IE9+
  width: calc((100% - 1px) / #{$cols} * #{$current-cols});
  // use col padding as gutter
  padding: 0 ($gutter / 2);

  @supports (display: flex) {
    width: calc(100% / #{$cols} * #{$current-cols});
  }
}

@mixin grid-min-width-and-margin(
  $margin,
  $grid-max-width,
  $max-h-margin,
  $min-screensize-map,
  $screensize
) {
  @if $margin == auto {
    min-width: calc(#{$grid-max-width} - (#{$max-h-margin} * 2));
  } @else {
    min-width: calc(
      #{map-get($min-screensize-map, $screensize)}px - (#{$margin} * 2)
    );
  }

  margin-left: $margin;
  margin-right: $margin;
}

$grid-values-map-length: length($grid-values-map);
$grid-max-width: #{map-get($min-screensize-map, l)}px;

$gutter: 24px;
$h-margin: 24px;
$max-h-margin: 64px;

.#{$prefix}grid {
  position: relative;
  display: flex;
  flex-direction: column;
  margin-left: $h-margin;
  margin-right: $h-margin;

  // set horizontal margin and width of grid container
  @each $screensize, $valuelist in $grid-values-map {
    $index: index(($grid-values-map), ($screensize $valuelist));
    $margin: nth($valuelist, 2);

    // get next element from grid-values-map for max-with on breakpoint media query until screensize l
    @if $index < $grid-values-map-length - 1 {
      $iterator-next: nth($grid-values-map, $index + 1);
      $next-screen-size: nth($iterator-next, 1);

      @include breakpoint--min-max(#{$screensize}, #{$next-screen-size}) {
        @include grid-min-width-and-margin(
          $margin,
          $grid-max-width,
          $max-h-margin,
          $min-screensize-map,
          $screensize
        );
      }
      // bigger than screensize l - breakpoint uses just min-width in media query
    } @else {
      // margin for screensize l
      @include breakpoint--min(#{$screensize}) {
        @include grid-min-width-and-margin(
          $margin,
          $grid-max-width,
          $max-h-margin,
          $min-screensize-map,
          $screensize
        );
      }

      // use screensize + margin for transition to margin: auto
      $next-margin: auto;
      @include breakpoint--custom-min(
        map-get($min-screensize-map, $screensize) + $margin + $margin
      ) {
        @include grid-min-width-and-margin(
          $next-margin,
          $grid-max-width,
          $max-h-margin,
          $min-screensize-map,
          $screensize
        );
      }
    }
  }

  // get grid max screen with from style-basics/_breakpoints.scss
  max-width: $grid-max-width;

  border: 1px solid blue;

  &:after,
  &:before {
    content: '';
    clear: both;
    display: table;
  }
}

.#{$prefix}grid--no-h-margin {
  $h-margin: 0;
  margin-left: $h-margin;
  margin-right: $h-margin;
}

.#{$prefix}grid__row {
  padding: 0;
  margin: 0;
  display: block;
  position: relative;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  // clear gutter on the first/left and last/right elements
  @each $screensize, $valuelist in $grid-values-map {
    @include breakpoint--min(#{$screensize}) {
      $gutter: nth($valuelist, 3);
      $half-gutter: $gutter / 2;

      // use negative margin to clear gutter
      margin-left: -#{$half-gutter};
      margin-right: -#{$half-gutter};
    }
  }

  &:after,
  &:before {
    content: '';
    display: table;
    clear: both;
  }
}

.#{$prefix}grid__col {
  // float is only for non flexbox browsers and overwritten by flex properties in modern browsers
  position: relative;
  display: block;
  float: left;
  flex-shrink: 1;
  border: 1px green solid;
}

$max-cols: 12;
$min-cols: 4;

// set col width for 12 col layout
@for $i from 1 through $max-cols {
  .#{$prefix}grid__col--#{$i}-#{$max-cols} {
    $cols: $min-cols;
    @include breakpoint-content($i, $cols, $gutter);

    // change col with and gutter on different breakpoints
    @each $screensize, $valuelist in $grid-values-map {
      $index: index(($grid-values-map), ($screensize $valuelist));

      // get next element from grid-values-map for max-with on breakpoint media query.
      @if $index < $grid-values-map-length {
        $iterator-next: nth($grid-values-map, $index + 1);
        $next-screen-size: nth($iterator-next, 1);

        @include breakpoint--min-max(#{$screensize}, #{$next-screen-size}) {
          $cols: nth($valuelist, 1);
          // gutter changes with breakpoint
          $gutter: nth($valuelist, 3);

          $current-cols: $i;
          @if $current-cols > $cols {
            $current-cols: $cols;
          }
          @include breakpoint-content($current-cols, $cols, $gutter);
        }
      }
      // bigger than xl - breakpoint uses just min-width in media query
      @else {
        @include breakpoint--min(#{$screensize}) {
          $cols: nth($valuelist, 1);
          $gutter: nth($valuelist, 3);

          @include breakpoint-content($i, $cols, $gutter);
        }
      }
    }
  }
}

// reverse map for specifity reasons
$grid-values-reverse-map: mapReverse($grid-values-map);
// @debug $grid-values-reverse-map;

// set cols for xl, l, m, s, xs
@each $screensize, $valuelist in $grid-values-reverse-map {
  $index: index(($grid-values-reverse-map), ($screensize $valuelist));
  $cols: nth($valuelist, 1);
  $gutter: nth($valuelist, 3);

  // get next screen size from reversed map as long as a next element in map exists
  @if $grid-values-map-length > $index {
    $iterator-next: nth($grid-values-reverse-map, $index + 1);
    $next-screen-size: nth($iterator-next, 1);

    @for $i from 1 through $cols {
      .#{$prefix}grid__col--#{$screensize}-#{$i}-#{$cols} {
        @include breakpoint--min-max(#{$next-screen-size}, #{$screensize}) {
          @include breakpoint-content($i, $cols, $gutter);
        }
      }
    }
    // get last screen size for media query to display smallest variant
  } @else {
    $iterator-next: nth($grid-values-reverse-map, $index - 1);
    $last-screen-size: nth($iterator-next, 1);

    @for $i from 1 through $cols {
      .#{$prefix}grid__col--#{$screensize}-#{$i}-#{$cols} {
        @include breakpoint--min-max(#{$screensize}, #{$last-screen-size}) {
          @include breakpoint-content($i, $cols, $gutter);
        }
      }
    }
  }
}

// set cols for xxs
$max-cols: 4;
$min-cols: 4;
$gutter: 24px;

@for $i from 1 through $max-cols {
  .#{$prefix}grid__col--xxs-#{$i}-#{$max-cols} {
    $cols: $min-cols;

    // difference here is use of breakpoint--max() instead of breakpoint--min()
    @include breakpoint--max(xs) {
      @include breakpoint-content($i, $cols, $gutter);
    }
  }
}

@warn 'Grid v0: Grid is deprecated - Since we don\'t have to rely on IE9, please update it and make it fancy!';

// this grid should be only implemented on full browser width elements!

//
// breakpoints:
// xxs: max. 575px
// xs: min. 576px
// s: min. 768px
// m: min. 992px
// l: min. 1200px
// xl: min. 1680px
// xxl: min. 1920px

// values: colums, margin, grid-gutter
// TODO: Fix castToSass() columns output as number
// grid gutter is currently not used from map.
$grid-values-map: (
  xs: (
    6,
    map-deep-get($guidelines, 'grid', 'xs', 'margin'),
    // 32px,
    map-deep-get($guidelines, 'grid', 'xs', 'gutter') // 32px,
  ),
  s: (
    6,
    map-deep-get($guidelines, 'grid', 's', 'margin') // 48px,
    map-deep-get($guidelines, 'grid', 's', 'gutter') // 32px,
  ),
  m: (
    8,
    map-deep-get($guidelines, 'grid', 'm', 'margin') // 64px,
    map-deep-get($guidelines, 'grid', 'm', 'gutter') // 32px,
  ),
  l: (
    12,
    map-deep-get($guidelines, 'grid', 'l', 'margin') // 64px,
    map-deep-get($guidelines, 'grid', 'l', 'gutter') // 32px,
  ),
  xl: (
    12,
    map-deep-get($guidelines, 'grid', 'xl', 'margin') // auto,
    map-deep-get($guidelines, 'grid', 'xl', 'gutter') // 32px,
  ),
);

// xxs values
$grid-gutter: 24px;
$grid-h-margin: 24px;

// other grid vars
$grid-max-cols: 12;
$grid-min-cols: 4;
$max-grid-h-margin: 64px;
$grid-values-map-length: length($grid-values-map);
$grid-max-width: #{map-get($min-screensize-map, l)}px;

@mixin grid-breakpoint-content($current-cols, $cols, $grid-gutter) {
  // -1px = floor calculated percentages workaround for IE9+ / Safari
  width: calc((100% - 1px) / #{$cols} * #{$current-cols});
  // use col padding as grid-gutter
  padding: 0 ($grid-gutter / 2);
}

@mixin grid-min-width-and-margin(
  $margin,
  $grid-max-width,
  $max-grid-h-margin,
  $min-screensize-map,
  $screensize
) {
  padding-left: $margin;
  padding-right: $margin;
}

.#{$prefix}grid {
  box-sizing: content-box;
  position: relative;
  display: flex;
  flex-direction: column;

  padding-left: $grid-h-margin;
  padding-right: $grid-h-margin;
  margin-left: auto;
  margin-right: auto;

  // set horizontal margin and width of grid container
  @each $screensize, $valuelist in $grid-values-map {
    $index: index(($grid-values-map), ($screensize $valuelist));
    $margin: nth($valuelist, 2);

    // get next element from grid-values-map for max-with on breakpoint media query until screensize l
    @if $index < $grid-values-map-length - 1 {
      $iterator-next: nth($grid-values-map, $index + 1);
      $next-screen-size: nth($iterator-next, 1);

      @include breakpoint--min-max(#{$screensize}, #{$next-screen-size}) {
        @include grid-min-width-and-margin(
          $margin,
          $grid-max-width,
          $max-grid-h-margin,
          $min-screensize-map,
          $screensize
        );
      }
      // bigger than screensize l - breakpoint uses just min-width in media query
    } @else {
      // margin for screensize l
      @include breakpoint--min(#{$screensize}) {
        @include grid-min-width-and-margin(
          $margin,
          $grid-max-width,
          $max-grid-h-margin,
          $min-screensize-map,
          $screensize
        );
      }

      @if $margin != auto {
        // use screensize + margin for transition to margin: auto
        $next-margin: auto;
        @include breakpoint--custom-min(
          map-get($min-screensize-map, $screensize) + $margin + $margin
        ) {
          @include grid-min-width-and-margin(
            $next-margin,
            $grid-max-width,
            $max-grid-h-margin,
            $min-screensize-map,
            $screensize
          );
        }
      }
    }
  }

  // get grid max screen with from style-basics/_breakpoints.scss
  max-width: $grid-max-width;
  // border: 1px solid blue;

  &:after,
  &:before {
    content: '';
    clear: both;
    display: table;
  }
}

.#{$prefix}grid--valign-center {
  justify-content: center;
}
.#{$prefix}grid--valign-bottom {
  justify-content: flex-end;
}

.#{$prefix}grid--no-h-margin {
  $grid-h-margin: 0;
  margin-left: $grid-h-margin;
  margin-right: $grid-h-margin;
}

.#{$prefix}grid__row {
  $half-grid-gutter: $grid-gutter / 2;
  // use negative margin to clear grid-gutter
  margin-left: -#{$half-grid-gutter};
  margin-right: -#{$half-grid-gutter};

  align-items: stretch;

  padding: 0;
  display: block;
  position: relative;

  @supports (display: flex) {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
  }

  // clear grid-gutter on the first/left and last/right elements
  @each $screensize, $valuelist in $grid-values-map {
    @include breakpoint--min(#{$screensize}) {
      // TODO: get grid-gutter from map if castToSass problem is fixed
      $grid-gutter: 32px; //nth($valuelist, 3);
      $half-grid-gutter: $grid-gutter / 2;

      // use negative margin to clear grid-gutter
      margin-left: -#{$half-grid-gutter};
      margin-right: -#{$half-grid-gutter};
    }
  }

  &:after,
  &:before {
    content: '';
    display: table;
    clear: both;
  }
}

.#{$prefix}grid__row--align-items-flex-start {
  align-items: flex-start;
}
.#{$prefix}grid__row--align-items-flex-end {
  align-items: flex-end;
}
.#{$prefix}grid__row--align-items-center {
  align-items: center;
}
.#{$prefix}grid__row--align-items-baseline {
  align-items: baseline;
}

.#{$prefix}grid__col {
  // float is only for non flexbox browsers and overwritten by flex properties in modern browsers
  position: relative;
  display: block;
  float: left;
  flex-shrink: 1;
  // border: 1px green solid;
  width: 100%;
}

.#{$prefix}grid__col--align-self-flex-start {
  align-self: flex-start;
}
.#{$prefix}grid__col--align-self-flex-end {
  align-self: flex-end;
}
.#{$prefix}grid__col--align-self-center {
  align-self: center;
}
.#{$prefix}grid__col--align-self-baseline {
  align-self: baseline;
}
.#{$prefix}grid__col--align-self-stretch {
  align-self: stretch;
}

// set cols for xxs
$grid-max-cols: 4;
$grid-min-cols: 4;
$grid-gutter: 24px;

@for $i from 1 through $grid-max-cols {
  .#{$prefix}grid__col--xxs-#{$i}-#{$grid-max-cols} {
    $cols: $grid-min-cols;

    // difference here is use of breakpoint--max() instead of breakpoint--min()
    @include breakpoint--max(xs) {
      @include grid-breakpoint-content($i, $cols, $grid-gutter);
    }
  }
}

// set cols for xs - xl
@each $screensize, $valuelist in $grid-values-map {
  $cols: nth($valuelist, 1);
  // TODO: get grid-gutter from map if castToSass problem is fixed
  $grid-gutter: 32px; //nth($valuelist, 3);

  @for $i from 1 through $cols {
    .#{$prefix}grid__col--#{$screensize}-#{$i}-#{$cols} {
      @include breakpoint--min(#{$screensize}) {
        @include grid-breakpoint-content($i, $cols, $grid-gutter);
      }
    }
  }
}
